{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      userInput: '',\n      messages: []\n    };\n  },\n  computed: {\n    processedMessages() {\n      return this.messages.map(msg => {\n        return {\n          ...msg,\n          content: this.wrapText(msg.content, 200)\n        };\n      });\n    }\n  },\n  methods: {\n    wrapText(text, maxLength) {\n      // Function to wrap text intelligently by finding the nearest space\n      let result = '';\n      let currentLine = '';\n      const words = text.split(' '); // Split text into words by space\n\n      words.forEach(word => {\n        if ((currentLine + word).length > maxLength) {\n          result += currentLine.trim() + '\\n'; // Add current line to result with a new line\n          currentLine = word + ' '; // Start a new line with the current word\n        } else {\n          currentLine += word + ' '; // Add word to the current line\n        }\n      });\n\n      // Add any remaining text to the result\n      result += currentLine.trim();\n      return result;\n    },\n    sendMessage() {\n      if (this.userInput.trim()) {\n        this.messages.push({\n          id: Date.now(),\n          content: this.userInput\n        });\n        this.userInput = ''; // Clear input field after sending message\n      }\n    },\n    handleInput() {\n      // Any specific logic for handling input\n    },\n    startTopic(topic) {\n      this.messages.push({\n        id: Date.now(),\n        content: `Selected topic: ${topic}`\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","userInput","messages","computed","processedMessages","map","msg","content","wrapText","methods","text","maxLength","result","currentLine","words","split","forEach","word","length","trim","sendMessage","push","id","Date","now","handleInput","startTopic","topic"],"sources":["E:\\UoB\\Software Engineering Project\\Ai Chatbot UI\\src\\components\\MainContent.vue"],"sourcesContent":["<template>\r\n  <main>\r\n    <div class=\"chat-area\">\r\n      <p>Welcome to \"AI Help\"!</p>\r\n      <p>Select two topics below:</p>\r\n      <button @click=\"startTopic('First Time Coming to University')\">First Time Coming to University</button>\r\n      <button @click=\"startTopic('Academic Inquiry')\">Academic Inquiry</button>\r\n\r\n      <!-- Display messages with smart wrapping -->\r\n      <div v-for=\"msg in processedMessages\" :key=\"msg.id\" class=\"message\">\r\n        {{ msg.content }}\r\n      </div>\r\n\r\n\r\n      <!-- Send message button -->\r\n      <button @click=\"sendMessage\">Send</button>\r\n    </div>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      userInput: '',\r\n      messages: [],\r\n    };\r\n  },\r\n  computed: {\r\n    processedMessages() {\r\n      return this.messages.map(msg => {\r\n        return {\r\n          ...msg,\r\n          content: this.wrapText(msg.content, 200),\r\n        };\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    wrapText(text, maxLength) {\r\n      // Function to wrap text intelligently by finding the nearest space\r\n      let result = '';\r\n      let currentLine = '';\r\n      const words = text.split(' '); // Split text into words by space\r\n\r\n      words.forEach((word) => {\r\n        if ((currentLine + word).length > maxLength) {\r\n          result += currentLine.trim() + '\\n'; // Add current line to result with a new line\r\n          currentLine = word + ' '; // Start a new line with the current word\r\n        } else {\r\n          currentLine += word + ' '; // Add word to the current line\r\n        }\r\n      });\r\n\r\n      // Add any remaining text to the result\r\n      result += currentLine.trim();\r\n      return result;\r\n    },\r\n    sendMessage() {\r\n      if (this.userInput.trim()) {\r\n        this.messages.push({ id: Date.now(), content: this.userInput });\r\n        this.userInput = '';  // Clear input field after sending message\r\n      }\r\n    },\r\n    handleInput() {\r\n      // Any specific logic for handling input\r\n    },\r\n    startTopic(topic) {\r\n      this.messages.push({ id: Date.now(), content: `Selected topic: ${topic}` });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nmain {\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.chat-area {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.message {\r\n  margin: 10px 0;\r\n  white-space: pre-wrap; /* Ensures that new lines are respected */\r\n}\r\n\r\ntextarea {\r\n  width: 100%;\r\n  height: 100px;\r\n  resize: none;\r\n  padding: 5px;\r\n  box-sizing: border-box;\r\n  font-size: 14px;\r\n}\r\n\r\ntextarea:focus {\r\n  outline: none;\r\n}\r\n\r\np {\r\n  font-size: 12px;\r\n  color: gray;\r\n}\r\n\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n}\r\n</style>\r\n"],"mappings":";AAqBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiBA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACF,QAAQ,CAACG,GAAG,CAACC,GAAE,IAAK;QAC9B,OAAO;UACL,GAAGA,GAAG;UACNC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACF,GAAG,CAACC,OAAO,EAAE,GAAG;QACzC,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;EACDE,OAAO,EAAE;IACPD,QAAQA,CAACE,IAAI,EAAEC,SAAS,EAAE;MACxB;MACA,IAAIC,MAAK,GAAI,EAAE;MACf,IAAIC,WAAU,GAAI,EAAE;MACpB,MAAMC,KAAI,GAAIJ,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC,EAAE;;MAE/BD,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAK;QACtB,IAAI,CAACJ,WAAU,GAAII,IAAI,EAAEC,MAAK,GAAIP,SAAS,EAAE;UAC3CC,MAAK,IAAKC,WAAW,CAACM,IAAI,CAAC,IAAI,IAAI,EAAE;UACrCN,WAAU,GAAII,IAAG,GAAI,GAAG,EAAE;QAC5B,OAAO;UACLJ,WAAU,IAAKI,IAAG,GAAI,GAAG,EAAE;QAC7B;MACF,CAAC,CAAC;;MAEF;MACAL,MAAK,IAAKC,WAAW,CAACM,IAAI,CAAC,CAAC;MAC5B,OAAOP,MAAM;IACf,CAAC;IACDQ,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACnB,SAAS,CAACkB,IAAI,CAAC,CAAC,EAAE;QACzB,IAAI,CAACjB,QAAQ,CAACmB,IAAI,CAAC;UAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;UAAEjB,OAAO,EAAE,IAAI,CAACN;QAAU,CAAC,CAAC;QAC/D,IAAI,CAACA,SAAQ,GAAI,EAAE,EAAG;MACxB;IACF,CAAC;IACDwB,WAAWA,CAAA,EAAG;MACZ;IAAA,CACD;IACDC,UAAUA,CAACC,KAAK,EAAE;MAChB,IAAI,CAACzB,QAAQ,CAACmB,IAAI,CAAC;QAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEjB,OAAO,EAAE,mBAAmBoB,KAAK;MAAG,CAAC,CAAC;IAC7E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}