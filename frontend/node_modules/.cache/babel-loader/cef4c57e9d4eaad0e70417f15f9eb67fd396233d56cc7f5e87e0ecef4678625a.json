{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"main\", null, [_createElementVNode(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"p\", null, \"Welcome to \\\"AI Help\\\"!\", -1 /* HOISTED */)), _cache[6] || (_cache[6] = _createElementVNode(\"p\", null, \"Select two topics below:\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.startTopic('First Time Coming to University'))\n  }, \"First Time Coming to University\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.startTopic('Academic Inquiry'))\n  }, \"Academic Inquiry\"), _createCommentVNode(\" Display messages with smart wrapping \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.processedMessages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.id,\n      class: \"message\"\n    }, _toDisplayString(msg.content), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Input area for new messages \"), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.userInput = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.handleInput && $options.handleInput(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userInput]]), _createCommentVNode(\" Send message button \"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Send\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","onClick","_cache","$event","$options","startTopic","_createCommentVNode","_Fragment","_renderList","processedMessages","msg","key","id","content","$data","userInput","onInput","args","handleInput","sendMessage"],"sources":["E:\\UoB\\Software Engineering Project\\Ai Chatbot UI\\src\\components\\MainContent.vue"],"sourcesContent":["<template>\r\n  <main>\r\n    <div class=\"chat-area\">\r\n      <p>Welcome to \"AI Help\"!</p>\r\n      <p>Select two topics below:</p>\r\n      <button @click=\"startTopic('First Time Coming to University')\">First Time Coming to University</button>\r\n      <button @click=\"startTopic('Academic Inquiry')\">Academic Inquiry</button>\r\n\r\n      <!-- Display messages with smart wrapping -->\r\n      <div v-for=\"msg in processedMessages\" :key=\"msg.id\" class=\"message\">\r\n        {{ msg.content }}\r\n      </div>\r\n\r\n      <!-- Input area for new messages -->\r\n      <textarea\r\n          v-model=\"userInput\"\r\n          @input=\"handleInput\"\r\n      ></textarea>\r\n\r\n\r\n      <!-- Send message button -->\r\n      <button @click=\"sendMessage\">Send</button>\r\n    </div>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      userInput: '',\r\n      messages: [],\r\n    };\r\n  },\r\n  computed: {\r\n    processedMessages() {\r\n      return this.messages.map(msg => {\r\n        return {\r\n          ...msg,\r\n          content: this.wrapText(msg.content, 200),\r\n        };\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    wrapText(text, maxLength) {\r\n      // Function to wrap text intelligently by finding the nearest space\r\n      let result = '';\r\n      let currentLine = '';\r\n      const words = text.split(' '); // Split text into words by space\r\n\r\n      words.forEach((word) => {\r\n        if ((currentLine + word).length > maxLength) {\r\n          result += currentLine.trim() + '\\n'; // Add current line to result with a new line\r\n          currentLine = word + ' '; // Start a new line with the current word\r\n        } else {\r\n          currentLine += word + ' '; // Add word to the current line\r\n        }\r\n      });\r\n\r\n      // Add any remaining text to the result\r\n      result += currentLine.trim();\r\n      return result;\r\n    },\r\n    sendMessage() {\r\n      if (this.userInput.trim()) {\r\n        this.messages.push({ id: Date.now(), content: this.userInput });\r\n        this.userInput = '';  // Clear input field after sending message\r\n      }\r\n    },\r\n    handleInput() {\r\n      // Any specific logic for handling input\r\n    },\r\n    startTopic(topic) {\r\n      this.messages.push({ id: Date.now(), content: `Selected topic: ${topic}` });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nmain {\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n}\r\n\r\n.chat-area {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.message {\r\n  margin: 10px 0;\r\n  white-space: pre-wrap; /* Ensures that new lines are respected */\r\n}\r\n\r\ntextarea {\r\n  width: 100%;\r\n  height: 100px;\r\n  resize: none;\r\n  padding: 5px;\r\n  box-sizing: border-box;\r\n  font-size: 14px;\r\n}\r\n\r\ntextarea:focus {\r\n  outline: none;\r\n}\r\n\r\np {\r\n  font-size: 12px;\r\n  color: gray;\r\n}\r\n\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n}\r\n</style>\r\n"],"mappings":";;EAESA,KAAK,EAAC;AAAW;;uBADxBC,mBAAA,CAsBO,eArBLC,mBAAA,CAoBM,OApBNC,UAoBM,G,0BAnBJD,mBAAA,CAA4B,WAAzB,yBAAqB,sB,0BACxBA,mBAAA,CAA+B,WAA5B,0BAAwB,sBAC3BA,mBAAA,CAAuG;IAA9FE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU;KAAqC,iCAA+B,GAC9FN,mBAAA,CAAyE;IAAhEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU;KAAsB,kBAAgB,GAEhEC,mBAAA,0CAA6C,G,kBAC7CR,mBAAA,CAEMS,SAAA,QAXZC,WAAA,CASyBJ,QAAA,CAAAK,iBAAiB,EAAxBC,GAAG;yBAAfZ,mBAAA,CAEM;MAFiCa,GAAG,EAAED,GAAG,CAACE,EAAE;MAAEf,KAAK,EAAC;wBACrDa,GAAG,CAACG,OAAO;kCAGhBP,mBAAA,iCAAoC,E,gBACpCP,mBAAA,CAGY;IAjBlB,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAemBW,KAAA,CAAAC,SAAS,GAAAZ,MAAA;IACjBa,OAAK,EAAAd,MAAA,QAAAA,MAAA,UAAAe,IAAA,KAAEb,QAAA,CAAAc,WAAA,IAAAd,QAAA,CAAAc,WAAA,IAAAD,IAAA,CAAW;iEADVH,KAAA,CAAAC,SAAS,E,GAKtBT,mBAAA,yBAA4B,EAC5BP,mBAAA,CAA0C;IAAjCE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAe,IAAA,KAAEb,QAAA,CAAAe,WAAA,IAAAf,QAAA,CAAAe,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}